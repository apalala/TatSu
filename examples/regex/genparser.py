#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}


class RegexpBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(RegexpBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class RegexpParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=RegexpBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(RegexpParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _S0_(self):  # noqa
        self._S1_()
        self._check_eof()

    @tatsumasu()
    def _S1_(self):  # noqa

        def block0():
            self._S2_()
        self._closure(block0)

    @tatsumasu()
    def _S2_(self):  # noqa
        with self._choice():
            with self._option():
                self._S3_()
            with self._option():
                self._S4_()
            self._error('no available options')

    @tatsumasu()
    def _S3_(self):  # noqa
        self._pattern(r'a')

    @tatsumasu()
    def _S4_(self):  # noqa
        self._pattern(r'b')


class RegexpSemantics(object):
    def S0(self, ast):  # noqa
        return ast

    def S1(self, ast):  # noqa
        return ast

    def S2(self, ast):  # noqa
        return ast

    def S3(self, ast):  # noqa
        return ast

    def S4(self, ast):  # noqa
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = RegexpParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, RegexpParser, name='Regexp')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
