single_input
    =
    newline | simple_stmt | compound_stmt newline
    ;


file_input
    =
    {newline | stmt}
    ;


eval_input
    =
    {newline} testlist {newline}
    ;


decorators
    =
    {decorator}+
    ;


decorator
    =
    '@' dotted_attr ['(' [arglist] ')'] newline
    ;


dotted_attr
    =
    name {'.' name}
    ;


funcdef
    =
    [decorators] 'def' name parameters ':' suite
    ;


parameters
    =
    '(' [varargslist] ')'
    ;


varargslist
    =
        defparameter
        {',' defparameter}
        [','
        [
        '*' name [',' '**' name] | '**' name
        ]
        ]
    |
        '*' name [',' '**' name]
    |
        '**' name
    ;


defparameter
    =
    fpdef ['=' test]
    ;


fpdef
    =
    name | '(' fplist ')'
    ;


fplist
    =
    fpdef {',' fpdef} [',']
    ;


stmt
    =
    simple_stmt | compound_stmt
    ;


simple_stmt
    =
    small_stmt {';' small_stmt} [';'] newline
    ;


small_stmt
    =
    | expr_stmt
    | print_stmt
    | del_stmt
    | pass_stmt
    | flow_stmt
    | import_stmt
    | global_stmt
    | exec_stmt
    | assert_stmt
    ;


expr_stmt
    =
    testlist
    [
    augassign yield_expr | augassign testlist | assigns
    ]
    ;


assigns
    =
    {assign_testlist}+ | {assign_yield}+
    ;


assign_testlist
    =
    '=' testlist
    ;


assign_yield
    =
    '=' yield_expr
    ;


augassign
    =
    | '+='
    | '-='
    | '*='
    | '/='
    | '%='
    | '&='
    | '|='
    | '^='
    | '<<='
    | '>>='
    | '**='
    | '//='
    ;


print_stmt
    =
    'print'
    [
    printlist | '>>' printlist
    ]
    ;


printlist
    =
    test {',' test} [',']
    ;


del_stmt
    =
    'del' exprlist
    ;


pass_stmt
    =
    'pass'
    ;


flow_stmt
    =
    break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
    ;


break_stmt
    =
    'break'
    ;


continue_stmt
    =
    'continue'
    ;


return_stmt
    =
    'return' [testlist]
    ;


yield_stmt
    =
    yield_expr
    ;


raise_stmt
    =
    'raise' [test [',' test [',' test]]]
    ;


import_stmt
    =
    import_name | import_from
    ;


import_name
    =
    'import' dotted_as_names
    ;


import_from
    =
    'from'
    ({'.'} dotted_name | {'.'}+)
    'import'
    ('*' | import_as_names | '(' import_as_names ')')
    ;


import_as_names
    =
    import_as_name {',' import_as_name} [',']
    ;


import_as_name
    =
    name ['as' name]
    ;


dotted_as_name
    =
    dotted_name ['as' name]
    ;


dotted_as_names
    =
    dotted_as_name {',' dotted_as_name}
    ;


dotted_name
    =
    name {'.' name}
    ;


global_stmt
    =
    'global' name {',' name}
    ;


exec_stmt
    =
    'exec' expr ['in' test [',' test]]
    ;


assert_stmt
    =
    'assert' test [',' test]
    ;


compound_stmt
    =
    | if_stmt
    | while_stmt
    | for_stmt
    | try_stmt
    | with_stmt
    | funcdef
    | classdef
    ;


if_stmt
    =
    'if' test ':' suite {elif_clause} ['else' ':' suite]
    ;


elif_clause
    =
    'elif' test ':' suite
    ;


while_stmt
    =
    'while' test ':' suite ['else' ':' suite]
    ;


for_stmt
    =
    'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
    ;


try_stmt
    =
    'try'
    ':'
    suite
    (
        | {except_clause}+ ['else' ':' suite] ['finally' ':' suite]
        | 'finally' ':' suite
    )
    ;


with_stmt
    =
    'with' test [with_var] ':' suite
    ;


with_var
    =
    ('as' | name) expr
    ;


except_clause
    =
    'except' [test [',' test]] ':' suite
    ;


suite
    =
    simple_stmt | newline indent {stmt}+ dedent
    ;


indent
    =
    ()
    ;


dedent
    =
    ()
    ;


test
    =
    or_test ['if' or_test 'else' test] | lambdef
    ;


or_test
    =
    and_test {'or' and_test}
    ;


and_test
    =
    not_test {'and' not_test}
    ;


not_test
    =
    'not' not_test | comparison
    ;


comparison
    =
    expr {comp_op expr}
    ;


comp_op
    =
    | '<'
    | '>'
    | '=='
    | '>='
    | '<='
    | '<>'
    | '!='
    | 'in'
    | 'not' 'in'
    | 'is'
    | 'is' 'not'
    ;


expr
    =
    xor_expr {'|' xor_expr}
    ;


xor_expr
    =
    and_expr {'^' and_expr}
    ;


and_expr
    =
    shift_expr {'&' shift_expr}
    ;


shift_expr
    =
    arith_expr {('<<' | '>>') arith_expr}
    ;


arith_expr
    =
    term {('+' | '-') term}
    ;


term
    =
    factor {('*' | '/' | '%' | '//') factor}
    ;


factor
    =
    '+' factor | '-' factor | '~' factor | power
    ;


power
    =
    atom {trailer} ['**' factor]
    ;


atom
    =
        '('
        [
        yield_expr | testlist_gexp
        ]

        ')'
    |
        '[' [listmaker] ']'
    |
        '{' [dictmaker] '}'
    |
        '`' testlist '`'
    |
        name
    |
        int
    |
        LONGINT
    |
        float
    |
        complex
    |
        {STRING}+
    ;


listmaker
    =
    test (list_for | {',' test}) [',']
    ;


testlist_gexp
    =
    test ({',' test} [','] | gen_for)
    ;


lambdef
    =
    'lambda' [varargslist] ':' test
    ;


trailer
    =
    '(' [arglist] ')' | '[' subscriptlist ']' | '.' name
    ;


subscriptlist
    =
    subscript {',' subscript} [',']
    ;


subscript
    =
    '.' '.' '.' | test [':' [test] [sliceop]] | ':' [test] [sliceop]
    ;


sliceop
    =
    ':' [test]
    ;


exprlist
    =
    expr {',' expr} [',']
    ;


testlist
    =
    test {',' test} [',']
    ;


dictmaker
    =
    test ':' test {',' test ':' test} [',']
    ;


classdef
    =
    'class' name ['(' [testlist] ')'] ':' suite
    ;


arglist
    =
        argument
        {',' argument}
        [','
        [
        '*' test [',' '**' test] | '**' test
        ]
        ]
    |
        '*' test [',' '**' test]
    |
        '**' test
    ;


argument
    =
    test
    [
    ('=' test) | gen_for
    ]
    ;


list_iter
    =
    list_for | list_if
    ;


list_for
    =
    'for' exprlist 'in' testlist [list_iter]
    ;


list_if
    =
    'if' test [list_iter]
    ;


gen_iter
    =
    gen_for | gen_if
    ;


gen_for
    =
    'for' exprlist 'in' or_test [gen_iter]
    ;


gen_if
    =
    'if' test [gen_iter]
    ;


yield_expr
    =
    'yield' [testlist]
    ;


float
    =
    | '.' DIGITS [EXPONENT]
    | DIGITS '.' EXPONENT
    | DIGITS ('.' [DIGITS [EXPONENT]] | EXPONENT)
    ;


LONGINT
    =
    int /[lL]/
    ;


EXPONENT
    =
    /[eE][+-]?/ DIGITS
    ;


int
    =
    '0' /[xX][0-9a-fA-F]+/ | '0' {DIGITS} | /[1-9]/ {DIGITS}
    ;


complex
    =
    int /[jJ]/ | float /[jJ]/
    ;


DIGITS
    =
    /[0-9]+/
    ;


name
    =
    /[a-zA-Z_][a-zA-Z_0-9]*/
    ;


STRING
    =
    [
    /[ru]/ | 'ur'
    ]

    (
        | "\\'\\'\\'" {TRIAPOS} "\\'\\'\\'"
        | '"""' {TRIQUOTE} '"""'
        | '"' {ESC | !/[\\\n"]/ /./} /["\']/ {ESC | !/[\\\n\']/ /./} "\\'"
    )
    ;


TRIQUOTE
    =
    ['"'] ['"'] {ESC | !/[\\"]/ /./}+
    ;


TRIAPOS
    =
    ["\\'"] ["\\'"] {ESC | !/[\\\']/ /./}+
    ;


ESC
    =
    '\\\\' /\w+|\S+/
    ;


CONTINUED_LINE
    =
    '\\\\' ['\\r'] '\\n' /[ \t]*/ (nl:newline | ())
    ;


newline
    =
    {['\\u000C'] ['\\r'] '\\n'}+
    ;


ws
    =
    /[ \t\u000C]+/
    ;


leading_ws
    =
    (/[ \t]+/ | {' ' | '\\t'}+ {['\\r'] '\\n'})
    ;


comment
    =
    /[ \t]*/ '#' {!'\\n' /./} {'\\n'}+ | '#' {!'\\n' /./}
    ;


INDENT
    =
    !()
    ;


DEDENT
    =
    !()
    ;

